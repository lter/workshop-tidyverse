{
  "hash": "5ccfe5f80d7b6748cd5c90e9f8fc4cd5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reshape\"\n---\n\n\n## Module Learning Objectives\n\nBy the end of this module, you will be able to:\n\n- <u>Contrast</u> \"long\" data with \"wide\" data  \n- <u>Use</u> `tidyr`'s `pivot_wider` and `pivot_longer` functions to reshape data\n\n\n::: {.cell}\n\n:::\n\n\n## Defining \"Shape\"\n\nBefore talking about *how* to reshape your data between wide and long format, let's talk about *what* \"shape\" means in reference to data. Fundamentally, \"long\" data are data with more rows than columns while \"wide\" data tend to have more columns than rows.\n\nFor example, in community ecology a \"wide\" dataframe could have each row being a site that researchers visited while each column could be a different species where the value in the row is the number of individuals of that species at that site. On the other hand, the `penguins` dataframe we've been working with so far is in \"long\" format because it has one row per penguin and multiple penguins are stacked up.\n\nBoth wide and long format data can be useful in certain contexts and it is sometimes most intuitive to reshape data from one form to the other (and sometimes back again to the original form!).\n\n## Reshaping Data\n\nThe `tidyr` package contains the intuitively-named `pivot_wider` and `pivot_longer` for doing exactly this reshaping.\n\nTo help demonstrate these two functions, let's begin by summarizing our dataframe to make changing the shape of the dataframe more visible than it would be with the full dataframe. For example, let's calculate the average bill length of each penguin species on each island.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Begin by naming our new data and the data they come from\npenguins_simp <- penguins %>%\n  # Now group by species and island\n  dplyr::group_by(species, island) %>%\n  # Calculate average bill length\n  dplyr::summarize(avg_bill_length_mm = mean(bill_length_mm, na.rm = TRUE)) %>%\n  # And don't forget to ungroup!\n  dplyr::ungroup()\n\n# And this is what we're left with:\npenguins_simp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  species   island    avg_bill_length_mm\n  <fct>     <fct>                  <dbl>\n1 Adelie    Biscoe                  39.0\n2 Adelie    Dream                   38.5\n3 Adelie    Torgersen               39.0\n4 Chinstrap Dream                   48.8\n5 Gentoo    Biscoe                  47.5\n```\n\n\n:::\n:::\n\n\nGreat! We can use this smaller data object to demonstrate reshaping more clearly. Let's begin with an example for `pivot_wider`.\n\n### `pivot_wider` Example: Reshaping to Wide Format\n\n:::callout-note\n## Example\n\n`pivot_wider` takes long format data and reshapes it into wide format.\n\n<p align=\"center\">\n<img src=\"images/reshape-pivot-wide.png\" alt=\"Graphic of a table with 'A' and 'B' columns being pivoted to a table with 'A', 'C', and 'D' columns and a 'B' row\" width=\"50%\" />\n</p>\n\nLet's say that we want to take that data object and reshape it into wide format so that each island is a column and each species of penguin is a row. The contents of each cell then are going to be the average bill length values that we just calculated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Begin by naming the objects\npenguins_wide <- penguins_simp %>%\n  # And now we can pivot wider with `pivot_wider`!\n  tidyr::pivot_wider(names_from = island,\n                     values_from = avg_bill_length_mm )\n\n# Take a look!\npenguins_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  species   Biscoe Dream Torgersen\n  <fct>      <dbl> <dbl>     <dbl>\n1 Adelie      39.0  38.5      39.0\n2 Chinstrap   NA    48.8      NA  \n3 Gentoo      47.5  NA        NA  \n```\n\n\n:::\n:::\n\n\nGreat! We now have each island as a column, each row is a penguin species, and the bill length measurement we took is included in each cell. Note that in this specific case this makes the number somewhat ambiguous so we might want to use `dplyr`'s `select` or the more specific `rename` to change the island names to be clearer that those values are bill lengths in milimeters.\n:::\n\n### `pivot_longer` Example: Reshaping to Long Format\n\n:::callout-note\n## Example\n\nNow that we have a small wide format data object, we can feed it to `pivot_longer` and reshape our data into long format! `pivot_longer` has very similar syntax *except* that with `pivot_longer` you need to tell the function which columns should be reshaped.\n\n`pivot_wider` on the other hand knows which columns to move around because you manually specify them in the \"names_from\" and \"values_from\" arguments.\n\n<p align=\"center\">\n<img src=\"images/reshape-pivot-long.png\" alt=\"Graphic of a table with 'A' and 'B' columns being pivoted to a table with 'C' and 'D' columns and 'A' and 'B' rows\" width=\"50%\" />\n</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Begin with our wide data\npenguins_wide %>%\n  # And reshape back into long format\n  pivot_longer(cols = -species,\n               names_to = \"island_name\",\n               values_to = \"mean_bill_length_mm\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  species   island_name mean_bill_length_mm\n  <fct>     <chr>                     <dbl>\n1 Adelie    Biscoe                     39.0\n2 Adelie    Dream                      38.5\n3 Adelie    Torgersen                  39.0\n4 Chinstrap Biscoe                     NA  \n5 Chinstrap Dream                      48.8\n6 Chinstrap Torgersen                  NA  \n7 Gentoo    Biscoe                     47.5\n8 Gentoo    Dream                      NA  \n9 Gentoo    Torgersen                  NA  \n```\n\n\n:::\n:::\n\n\nTwo quick things to note here:\n\n- First, `pivot_longer` included the cells that were NA in the wide version of the data.\n    - This default behavior is really nice so that you don't lose any cells implicitly (though you can always `filter` them out if you don't want them!).\n- Second, you'll note that in the \"cols\" argument I only told `pivot_longer` to *not* include the \"species\" column using the same notation you could use for the `select` function in the `dplyr` package.\n    - This is very handy because it lets us write really concise values in the \"cols\" argument and the default becomes \"everything *except* what was specified\".\n    - Note that we could have also said `cols = Biscoe, Dream, Torgersen` and achieved the same reshaping of the data.\n:::\n\n### Challenge: Reshaping\n\n:::callout-important\n## Your Turn!\n\nThe code below creates a data object that includes the flipper length of all Adelie penguins; what code would you add to reshape the data so that each sex is a column with flipper lengths in the cells?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  # Keep only Adelie penguins of known sex\n  dplyr::filter(species == \"Adelie\" & !is.na(sex)) %>%\n  # Calculate the average flipper length by island and sex\n  dplyr::group_by(island, sex) %>%\n  dplyr::summarize(avg_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE)) %>%\n  # Ungroup (good practice to include this step!)\n  dplyr::ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  island    sex    avg_flipper_length_mm\n  <fct>     <fct>                  <dbl>\n1 Biscoe    female                  187.\n2 Biscoe    male                    190.\n3 Dream     female                  188.\n4 Dream     male                    192.\n5 Torgersen female                  188.\n6 Torgersen male                    195.\n```\n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}